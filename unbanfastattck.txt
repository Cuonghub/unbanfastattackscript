local remote, idremote for v in next, ((game. ReplicatedStorage util, game. ReplicatedStorage.common, game. ReplicatedStorage. Remotes, game. ReplicatedStorage.Assets, game. ReplicatedStorage.FX)) do for nin next, v:GetChildren() do if n:ISA("RemoteEvent") and n:GetAttribute("Id") then remote, idremoten, n:6etAttribute("id")

end v.ChildAdded:Connect(function(n) if n:ISA("RemoteEvent") and n:GetAttribute("Id") then. end remote, idremoten, n:GetAttribute("id")

end

end)

end task. spawn (function()

while task.wait(0.95) do local char game. Players. LocalPlayer.Character local root char and char: FindFirstChild("HumanoidRootPart") local parts = {} for x in ipairs((workspace. Enemies, workspace. Characters)) do for v in ipairs(x and x:GetChildren() or (3) do local hrpv:FindFirstChild("HumanoidRootPart") local hum v:FindFirstchild("Humanoid") If v char and hrp and hum and hum. Health e and (hrp.Position

root Position) Magnitude for 60 then v in ipairs(v:GetChildren()) do if v: ISA("BasePart") and (hrp.Position

root. Position). Magnitude 60 then

parts[#parts+1] = [v, v

end

end

end

end end if #parts and tool and (tool:GetAttribute("weaponType") == "Relee" or

local tool char:FindFirstChildOfClass("Tool")

tool: GetAttribute("WeaponType") == "sword") then pcall(function()

require(game. ReplicatedStorage, Modules.Net): RemoteEvent("RegisterHit", true)

game. ReplicatedStorage. Modules.Net["RE/RegisterAttack"]: FireServer() local head parts [1] [1]: FindFirstChild("Head")

If not head then return end

game. ReplicatedStorage, Modules.Net ["RE/RegisterHit"]: FireServer (head, parts, .

tostring(game. Players. LocalPlayer.UserId): sub (2, 4).. tostring(coroutine, running()): sub(11, 15))

function(c)

cloneref (remote): FireServer(string.gsub("RE/RegisterHit", ".".

return string.char(bit32.bxor(string.byte(c), math.floor (workspace:GetServer TimeNow()/10 % 10) + 1)) end),

bit32.bxor(idremote 909096, game. ReplicatedStorage. Modules.Net.seed: InvokeServer() 2), head, parts) end)

end

end

end ) 